# frozen_string_literal: true 

require 'spec_helper'

RSpec.describe Lobanov::RefVisitor do 
  let(:subject) do 
    Lobanov::RefVisitor.visit(schema)  
  end

  describe 'call' do
    context 'with schema without internal #references' do
      let(:schema) { YAML.load(schema_yaml) }
      let(:schema_yaml) do
        <<~YAML
        ---
        openapi: 3.0.1
        info:
          title: This is an example schema to check the mechanism of bundling to a single file
          description: This schema is stored in multiple folders and has recursive $refs
          version: 1.0.0
        tags:
          - name: lobanov
            description: Generated by me
        paths:
          /fruits:
            get:
              description: GET /fruits
              operationId: FruitsIndex
              responses:
                '200':
                  description: GET /fruits -> 200
                  content:
                    application/json:
                      schema:
                        $ref: ./components/responses/FruitsIndex200Response.yaml
              tags:
                - lobanov
            post:
              description: POST /fruits
              operationId: FruitsCreate
              responses:
                '201':
                  description: POST /fruits -> 201 
                  content:
                    application/json:
                      schema:
                        $ref: ./components/responses/FruitsCreate201Response.yaml
                '400':
                  description: POST /fruits -> 400
                  content:
                    application/json:
                      schema:
                        $ref: ./components/responses/FruitsCreate400Response.yaml
              tags:
                - lobanov
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: ./components/requestBodies/FruitsCreateRequestBody.yaml
                YAML
      end
    
      let(:expected_result) do 
        [
          { 
            path: ['paths', '/fruits', 'get', 'responses', '200', 'content', 'application/json', 'schema'], 
            value: {'$ref' => './components/responses/FruitsIndex200Response.yaml'}
          },
          {
            path: ['paths', '/fruits', 'post', 'responses', '201', 'content', 'application/json', 'schema'],
            value: {'$ref' => './components/responses/FruitsCreate201Response.yaml'}
          },
          {
            path: ['paths', '/fruits', 'post', 'responses', '400', 'content', 'application/json', 'schema'],
            value: {'$ref' => './components/responses/FruitsCreate400Response.yaml'}
          },
          {
            path: ['paths', '/fruits', 'post', 'requestBody', 'content', 'application/json', 'schema'],
            value: {'$ref' => './components/requestBodies/FruitsCreateRequestBody.yaml'}
          }
        ]
      end

      it 'returns expected etalon result' do 
        expect(subject.to_a).to eq(expected_result)
      end
    end
  end
end

