## frozen_string_literal: true
#
#require 'spec_helper'
#
#RSpec.describe Lobanov::Support::ReplaceRefsWithRegisteredComponents do
#  let(:schema) { YAML.load_file('spec/fixtures/index.yaml') }
#  let(:result) { described_class.call(schema: schema) }
#
#  let(:index_yaml) do 
#    ~>> YAML
#    openapi: 3.0.1
#    info:
#      title: This is an example schema to check the mechanism of bundling to a single file
#      description: This schema is stored in multiple folders and has recursive $refs
#      version: 1.0.0
#    tags:
#      - name: lobanov
#        description: Generated by me
#    paths:
#      /fruits:
#        get:
#          description: GET /fruits
#          operationId: FruitsIndex
#          responses:
#            '200':
#              description: GET /fruits -> 200
#              content:
#                application/json:
#                  schema:
#                    $ref: ./components/responses/FruitsIndex200Response.yaml
#          tags:
#            - lobanov
#    components:
#      schemas:
#        Fruit:
#          "$ref": ./components/schemas/Fruit.yaml
#    YAML
#  end
#
#  let(:index_response_yaml) do 
#    ~>> YAML
#    type: object
#    required:
#    - items
#    properties:
#      items:
#        type: array
#        minItems: 1
#        uniqueItems: true
#        items:
#          $ref: ../schemas/Fruit.yaml 
#    YAML
#  end
#
#  let(:expected_index_yaml) do 
#    openapi: 3.0.1
#    info:
#      title: This is an example schema to check the mechanism of bundling to a single file
#      description: This schema is stored in multiple folders and has recursive $refs
#      version: 1.0.0
#    tags:
#      - name: lobanov
#        description: Generated by me
#    paths:
#      /fruits:
#        get:
#          description: GET /fruits
#          operationId: FruitsIndex
#          responses:
#            '200':
#              description: GET /fruits -> 200
#              content:
#                application/json:
#                  schema:
#                    $ref: ./components/responses/FruitsIndex200Response.yaml
#          tags:
#            - lobanov
#    components:
#      schemas:
#        Fruit:
#          "$ref": ./components/schemas/Fruit.yaml
#  end
#
#  let(:index) { YAML.load(index_yaml) }
#  let(:index_response) { YAML.load(index_response_yaml) }
#
#  it 'replaces refs with registered components' do
#    result = Lobanov::Support::ReplaceWithLocalRefs.call(schema: index) 
#  end
#end
